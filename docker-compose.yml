version: '3.8'

services:
  # Base de données MySQL
  mysql:
    image: mysql:8.0
    container_name: findata-mysql
    environment:
      - MYSQL_ROOT_PASSWORD=findata_root_password
      - MYSQL_DATABASE=findata
      - MYSQL_USER=findata_user
      - MYSQL_PASSWORD=findata_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - findata-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: findata-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - findata-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend Flask
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: findata-backend
    ports:
      - "8080:8080"
    environment:
      - FLASK_ENV=production
      - FLASK_DEBUG=false
      - PORT=8080
    env_file:
      - .env
    volumes:
      - ./backend/logs:/app/logs
    networks:
      - findata-network
    depends_on:
      - mysql
      - redis
      - prometheus
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React
  frontend:
    build:
      context: ./frontend-react
      dockerfile: Dockerfile
    container_name: findata-frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - findata-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Prometheus pour le monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: findata-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - findata-network
    restart: unless-stopped

  # Grafana pour les dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: findata-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - findata-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Sentry pour le monitoring des erreurs
  sentry:
    image: getsentry/sentry:latest
    container_name: findata-sentry
    ports:
      - "9000:9000"
    environment:
      - SENTRY_SECRET_KEY=your-secret-key-here
      - SENTRY_POSTGRES_HOST=sentry-postgres
      - SENTRY_REDIS_HOST=sentry-redis
    volumes:
      - sentry_data:/var/lib/sentry
    networks:
      - findata-network
    depends_on:
      - sentry-postgres
      - sentry-redis
    restart: unless-stopped

  # Base de données PostgreSQL pour Sentry
  sentry-postgres:
    image: postgres:13
    container_name: findata-sentry-postgres
    environment:
      - POSTGRES_PASSWORD=sentry
      - POSTGRES_USER=sentry
      - POSTGRES_DB=sentry
    volumes:
      - sentry_postgres_data:/var/lib/postgresql/data
    networks:
      - findata-network
    restart: unless-stopped

  # Redis pour Sentry
  sentry-redis:
    image: redis:6-alpine
    container_name: findata-sentry-redis
    networks:
      - findata-network
    restart: unless-stopped

volumes:
  mysql_data:
  redis_data:
  prometheus_data:
  grafana_data:
  sentry_data:
  sentry_postgres_data:

networks:
  findata-network:
    driver: bridge 