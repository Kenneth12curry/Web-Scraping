"""
Script de test complet pour l'architecture modulaire
"""
import os
import sys
import logging

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_all_modules():
    """Tester tous les modules de l'architecture modulaire"""
    try:
        logger.info("=== Test complet de l'architecture modulaire ===")
        
        # Test des imports de base
        logger.info("1. Test des imports de base...")
        from config import Config
        logger.info("‚úì Config import√©")
        
        # Test des connecteurs de base de donn√©es
        logger.info("2. Test des connecteurs de base de donn√©es...")
        from database.mysql_connector import mysql_connector
        logger.info("‚úì MySQL connector import√©")
        
        from database.redis_connector import redis_connector
        logger.info("‚úì Redis connector import√©")
        
        # Test des services
        logger.info("3. Test des services...")
        from services.auth_service import auth_service
        logger.info("‚úì Auth service import√©")
        
        from services.subscription_service import subscription_service
        logger.info("‚úì Subscription service import√©")
        
        from services.scraping_service import scraping_service
        logger.info("‚úì Scraping service import√©")
        
        # Test des routes
        logger.info("4. Test des routes...")
        from routes.auth_routes import auth_bp
        logger.info("‚úì Auth routes import√©")
        
        from routes.subscription_routes import subscription_bp
        logger.info("‚úì Subscription routes import√©")
        
        from routes.dashboard_routes import dashboard_bp
        logger.info("‚úì Dashboard routes import√©")
        
        from routes.health_routes import health_bp
        logger.info("‚úì Health routes import√©")
        
        from routes.scraping_routes import scraping_routes
        logger.info("‚úì Scraping routes import√©")
        
        # Test des utils
        logger.info("5. Test des utils...")
        from utils.decorators import monitor_request, validate_json
        logger.info("‚úì D√©corateurs import√©s")
        
        from utils.validators import validate_email, validate_password
        logger.info("‚úì Validateurs import√©s")
        
        from utils.helpers import generate_secure_token, send_email
        logger.info("‚úì Helpers import√©s")
        
        # Test du middleware
        logger.info("6. Test du middleware...")
        from middleware.monitoring import MonitoringMiddleware, get_metrics
        logger.info("‚úì Middleware de monitoring import√©")
        
        logger.info("‚úì Tous les modules import√©s avec succ√®s")
        return True
        
    except Exception as e:
        logger.error(f"‚úó Erreur lors des imports: {e}")
        return False

def test_app_creation():
    """Tester la cr√©ation de l'application"""
    try:
        logger.info("7. Test de cr√©ation de l'application...")
        
        from app_modular import create_app
        app = create_app()
        
        logger.info("‚úì Application cr√©√©e avec succ√®s")
        logger.info(f"‚úì Nombre de blueprints enregistr√©s: {len(app.blueprints)}")
        
        # V√©rifier les blueprints
        expected_blueprints = ['auth', 'subscription', 'dashboard', 'health']
        for blueprint_name in expected_blueprints:
            if blueprint_name in app.blueprints:
                logger.info(f"‚úì Blueprint '{blueprint_name}' enregistr√©")
            else:
                logger.warning(f"‚ö† Blueprint '{blueprint_name}' manquant")
        
        return True
        
    except Exception as e:
        logger.error(f"‚úó Erreur lors de la cr√©ation de l'application: {e}")
        return False

def test_validation_functions():
    """Tester les fonctions de validation"""
    try:
        logger.info("8. Test des fonctions de validation...")
        
        from utils.validators import validate_email, validate_password, validate_url
        
        # Test validation email
        is_valid, message = validate_email("test@example.com")
        if is_valid:
            logger.info("‚úì Validation email fonctionnelle")
        else:
            logger.error(f"‚úó Validation email √©chou√©e: {message}")
            return False
        
        # Test validation mot de passe
        is_valid, message = validate_password("Test123!")
        if is_valid:
            logger.info("‚úì Validation mot de passe fonctionnelle")
        else:
            logger.error(f"‚úó Validation mot de passe √©chou√©e: {message}")
            return False
        
        # Test validation URL
        is_valid, message = validate_url("https://example.com")
        if is_valid:
            logger.info("‚úì Validation URL fonctionnelle")
        else:
            logger.error(f"‚úó Validation URL √©chou√©e: {message}")
            return False
        
        return True
        
    except Exception as e:
        logger.error(f"‚úó Erreur lors des tests de validation: {e}")
        return False

def main():
    """Fonction principale de test"""
    logger.info("=== Test complet de l'architecture modulaire ===")
    
    # Test des imports
    if not test_all_modules():
        logger.error("‚ùå √âchec des tests d'import")
        return False
    
    # Test de cr√©ation d'application
    if not test_app_creation():
        logger.error("‚ùå √âchec du test de cr√©ation d'application")
        return False
    
    # Test des fonctions de validation
    if not test_validation_functions():
        logger.error("‚ùå √âchec des tests de validation")
        return False
    
    logger.info("‚úÖ Tous les tests ont r√©ussi!")
    logger.info("üéâ L'architecture modulaire est compl√®te et fonctionnelle!")
    return True

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1) 