#!/usr/bin/env python3
"""
Test des am√©liorations apport√©es √† l'architecture modulaire
"""
import os
import sys
import logging

# Configuration du logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_database_connectors():
    """Tester les connecteurs de base de donn√©es avec les nouvelles m√©thodes"""
    logger.info("üóÑÔ∏è Test des connecteurs de base de donn√©es am√©lior√©s...")
    
    try:
        from database.mysql_connector import mysql_connector
        from database.redis_connector import redis_connector
        
        # Test MySQL
        logger.info("üìä Test MySQL Connector...")
        mysql_result = mysql_connector.test_connection()
        if mysql_result:
            logger.info("‚úÖ MySQL Connector - Test de connexion r√©ussi")
        else:
            logger.warning("‚ö†Ô∏è MySQL Connector - Test de connexion √©chou√© (normal si MySQL n'est pas d√©marr√©)")
        
        # Test Redis
        logger.info("üìä Test Redis Connector...")
        redis_result = redis_connector.test_connection()
        if redis_result:
            logger.info("‚úÖ Redis Connector - Test de connexion r√©ussi")
        else:
            logger.warning("‚ö†Ô∏è Redis Connector - Test de connexion √©chou√© (normal si Redis n'est pas d√©marr√©)")
        
        # Test des fonctionnalit√©s de cache Redis
        logger.info("üìä Test des fonctionnalit√©s de cache...")
        
        # Test set/get
        test_key = "test_improvements"
        test_data = {"message": "Test des am√©liorations", "status": "success"}
        
        set_result = redis_connector.set_cached_data(test_key, test_data, 60)
        if set_result:
            logger.info("‚úÖ Cache - Stockage r√©ussi")
        else:
            logger.warning("‚ö†Ô∏è Cache - Stockage √©chou√©")
        
        get_result = redis_connector.get_cached_data(test_key)
        if get_result and get_result.get("message") == "Test des am√©liorations":
            logger.info("‚úÖ Cache - R√©cup√©ration r√©ussi")
        else:
            logger.warning("‚ö†Ô∏è Cache - R√©cup√©ration √©chou√©")
        
        # Test des statistiques
        stats = redis_connector.get_cache_stats()
        logger.info(f"üìä Statistiques du cache: {stats}")
        
        # Nettoyage
        redis_connector.delete_cached_data(test_key)
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du test des connecteurs: {e}")
        return False

def test_flask_limiter_configuration():
    """Tester la configuration Flask-Limiter am√©lior√©e"""
    logger.info("üõ°Ô∏è Test de la configuration Flask-Limiter...")
    
    try:
        from app_modular import create_app
        
        # Cr√©er l'application
        app = create_app()
        
        # V√©rifier que l'application a √©t√© cr√©√©e avec succ√®s
        if app:
            logger.info("‚úÖ Application Flask cr√©√©e avec succ√®s")
            
            # V√©rifier la configuration Flask-Limiter
            if hasattr(app, 'limiter'):
                logger.info("‚úÖ Flask-Limiter configur√©")
                
                # V√©rifier la strat√©gie
                strategy = getattr(app.limiter, 'strategy', 'unknown')
                logger.info(f"üìä Strat√©gie Flask-Limiter: {strategy}")
                
                # V√©rifier le storage
                storage = getattr(app.limiter, 'storage', None)
                if storage:
                    storage_type = type(storage).__name__
                    logger.info(f"üìä Storage Flask-Limiter: {storage_type}")
                else:
                    logger.warning("‚ö†Ô∏è Storage Flask-Limiter non d√©tect√©")
                
            else:
                logger.warning("‚ö†Ô∏è Flask-Limiter non configur√©")
            
            return True
        else:
            logger.error("‚ùå √âchec de cr√©ation de l'application")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du test Flask-Limiter: {e}")
        return False

def test_middleware_improvements():
    """Tester les am√©liorations des middlewares"""
    logger.info("üõ°Ô∏è Test des am√©liorations des middlewares...")
    
    try:
        # Test du middleware de monitoring
        from middleware.monitoring import MonitoringMiddleware
        logger.info("‚úÖ MonitoringMiddleware import√©")
        
        # Test du middleware de gestion d'erreurs
        from middleware.error_handlers import ErrorHandlerMiddleware
        logger.info("‚úÖ ErrorHandlerMiddleware import√©")
        
        # Test du middleware de s√©curit√©
        from middleware.security import SecurityMiddleware
        logger.info("‚úÖ SecurityMiddleware import√©")
        
        # Test du middleware de rate limiting
        from middleware.rate_limiter import RateLimiterMiddleware
        logger.info("‚úÖ RateLimiterMiddleware import√©")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du test des middlewares: {e}")
        return False

def test_services_improvements():
    """Tester les am√©liorations des services"""
    logger.info("üîß Test des am√©liorations des services...")
    
    try:
        # Test du service d'authentification
        from services.auth_service import auth_service
        logger.info("‚úÖ AuthService import√©")
        
        # Test du service d'abonnement
        from services.subscription_service import subscription_service
        logger.info("‚úÖ SubscriptionService import√©")
        
        # Test du service de scraping
        from services.scraping_service import scraping_service
        logger.info("‚úÖ ScrapingService import√©")
        
        # Test du service d'emails
        from services.email_service import email_service
        logger.info("‚úÖ EmailService import√©")
        
        # Test de la m√©thode test_connection du service d'emails
        smtp_result = email_service.test_smtp_connection()
        if smtp_result[0]:
            logger.info("‚úÖ EmailService - Test SMTP r√©ussi")
        else:
            logger.warning(f"‚ö†Ô∏è EmailService - Test SMTP √©chou√©: {smtp_result[1]}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du test des services: {e}")
        return False

def main():
    """Fonction principale de test des am√©liorations"""
    logger.info("=" * 60)
    logger.info("üß™ TEST DES AM√âLIORATIONS DE L'ARCHITECTURE MODULAIRE")
    logger.info("=" * 60)
    
    # R√©sultats des tests
    results = {}
    
    # Test 1: Connecteurs de base de donn√©es
    logger.info("\nüóÑÔ∏è Test 1: Connecteurs de base de donn√©es am√©lior√©s")
    db_ok = test_database_connectors()
    results['database_connectors'] = db_ok
    
    # Test 2: Configuration Flask-Limiter
    logger.info("\nüõ°Ô∏è Test 2: Configuration Flask-Limiter am√©lior√©e")
    limiter_ok = test_flask_limiter_configuration()
    results['flask_limiter'] = limiter_ok
    
    # Test 3: Middlewares
    logger.info("\nüõ°Ô∏è Test 3: Am√©liorations des middlewares")
    middleware_ok = test_middleware_improvements()
    results['middleware'] = middleware_ok
    
    # Test 4: Services
    logger.info("\nüîß Test 4: Am√©liorations des services")
    services_ok = test_services_improvements()
    results['services'] = services_ok
    
    # R√©sum√© final
    logger.info("\n" + "=" * 60)
    logger.info("üìä R√âSUM√â DES TESTS D'AM√âLIORATION")
    logger.info("=" * 60)
    
    total_tests = len(results)
    passed_tests = sum(1 for result in results.values() if result)
    
    for test_name, result in results.items():
        status = "‚úÖ PASS√â" if result else "‚ùå √âCHOU√â"
        logger.info(f"{test_name:25} | {status}")
    
    logger.info("-" * 60)
    success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
    logger.info(f"TOTAL: {passed_tests}/{total_tests} tests pass√©s ({success_rate:.1f}%)")
    
    if success_rate >= 75:
        logger.info("üéâ AM√âLIORATIONS IMPL√âMENT√âES AVEC SUCC√àS !")
        return True
    elif success_rate >= 50:
        logger.info("‚ö†Ô∏è AM√âLIORATIONS PARTIELLEMENT IMPL√âMENT√âES")
        return False
    else:
        logger.info("‚ùå AM√âLIORATIONS INCOMPL√àTES")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 